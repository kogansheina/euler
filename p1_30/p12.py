#!/usr/bin/env python
import os
import genprimes
    
"""
Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
"""
def genTriangle(number):
    sum = 0
    for i in range(1,number+1):
        sum += i
    return sum
    
if __name__ == '__main__':
    from sys import argv
    
    number = 1000
    triangle = 7
    if len(argv) > 1:
        triangle = int(argv[1]) 
    if len(argv) > 2:
        number = int(argv[2]) 
        
    prime = genprimes.genPrimes(number)
    while True:
        tri = genTriangle(triangle)
        tp = genprimes.foundDividers(tri,prime)
        dividers = tp[0]
        divpowers = tp[1]
        alldiv = [1]
        for i in range(0,len(dividers)):
            temp = list(alldiv)
            for j in range(0,len(temp)):
                t = temp[j]*dividers[i]
                if t <= tri and not t in alldiv:
                    alldiv.append(t)
                else:
                    break
            for t in range(1,divpowers[i]+1):
                k = dividers[i]**t
                if k <= tri and not k in alldiv:
                    alldiv.append(k)
        if len(alldiv) > 100:
            print "triangle=%d (from %d) number of dividers=%d" % (tri,triangle,len(alldiv))
            print alldiv
            break
        triangle += 1
